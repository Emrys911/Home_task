Задачи на Comprehensions
1.	Сгенерировать список нечётных двузначных  чисел.
2.	Сгенерировать список из 10 чисел степени 2. От 1 до 10.
3.	Сгенерировать список всех трёхзначных чисел кратных 5 и 3.
4.	Дан список, упорядоченный по не убыванию элементов в нем. Определите, сколько в нем различных элементов. Set не использовать. 
5.	Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).Если на вход пришло только одно число, надо вывести его же. Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

Sample Input 1:
1 3 5 6 10
Sample Output 1:
13 6 9 15 7
Sample Input 2:
10
Sample Output 2:
10
Sample Input 3:
10 2
Sample Output 3:
4 20

6.	Создать список используя comprehension. Продублировать все неповторяющиеся элементы.
Задачи на функции
7.	Дана функция, которая выводит все простые числа в промежутке от 1 до 100. Написать декоратор который будет проверять время работы этой функции. Задекорировать функцию. Вывести время работы этой функции, а так же сами простые числа.
8.	Дана функция которая запрашивает у пользователя определённые данные для регистрации на портале и запоминает их. Напишите декоратор, который будет засекать время проведённое пользователем на портале при регистрации.

Дополнительные задачи
9.	Напишите рекурсивную функцию is_power(n), которая возвращает True, если переданное натуральное число является степенью двойки, и False иначе. 
Sample Input:
1048576
Sample Output:
True

10.	Сгенерируйте список как показано ниже при помощи генератора:

[1,   2 ,  3 ,  4 ,  5]
6   7   8   9   10
11 12 13 14 15
16 17 18 19 20

11.	 Сгенерировать список всех простых чисел до  100 с помощью генератора.
12.	 Создать список используя comprehension. Преобразуйте исходный список, вставив 0 между числами. Дополнительный список не создавать!

Sample Input:
7 4 1
Sample Output:
7 0 4 0 1

1.
list_num = []
for i in range(10,99):
     list_num.append(i)
print(list_num)


2.
basic = []
for x in range(1,10):
    basic.append(x**2)
    basic = [x * x for x in range(1,10)]
print(basic) 

3. 
rng = int(input('Введите число: '))
useful = []
for i in range (rng):
    if i % 3 == 0 or i % 5 == 0:
        useful.append(i)
        print(sum(useful))
        print(sum(i) for i in range(int(input('Введите число: '))))   

4. 
a = [int(i) for i in input().split()]
num_distinct = 1
for i in range(0, len(a) - 1):
    if a[i] != a[i + 1]:
        num_distinct +=1
        print(num_distinct)

*****************************************

a = input().split()
sum_index = 0
for i in range(0, len(a) - 1):
    if int(a[i] != int(a[i +1])):
        sum_index +=1
        print(sum_index +1)

5. 
initial_list = [1, 3, 5, 6, 10]
sum_list = []
left_index = -1
right_index = -len(initial_list) + 1
middle_index = 0
while middle_index < len(initial_list):
    print(left_index, right_index)
    sum_list.append(initial_list[left_index] + initial_list[right_index])
    left_index += 1
    right_index += 1
    middle_index += 1
    print(sum_list)

**********************************************

line = input('Введите список целых чисел разделенных пробелом')
numbers = list(map(int.line.split()))
if len(numbers == 1):
    print(numbers[0])
else:
    neighbours = numbers[-1:] + numbers + numbers[:1]
    print(*[a + b for a, b in zip(neighbours, neighbours[2:])])

6.
import collections
x = []
x = unique_items = []
for item in items:
    unicode_item = unicode(item)
    if unicode_item not in unique_items:
        x = unicode_item.append(unicode_item)
        print(item for item, count in collections.counter(x).items() if count > 1)

7.
import datetime


def timerange(func):

    def wrapper():
        start_time = datetime.datetime.now()

        func()
        end_time = datetime.datetime.now()
        print(f'Время старта работы - {start_time}')
        print(f'Время финиша работы - {end_time}')
        execution_time = end_time - start_time
        return f'Время работы программы - {execution_time}'
    print(wrapper())


@timerange
def print_primes():
    for num in range(2, 11111):
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            print(num)

8.
import functools
def add_info(func):
    @functools.wraps(func)
    def wraps(*args, **kwargs):
     res = func(*args, **kwargs)
     return res
    @timeit
    def add(x,y):
        return x + y
    print(add(x, y))
    start_time = time.time()
    info = temp = func(*args, **kwargs)
    end_time = time.time()
    print('Время работы функции:',input(info), start_time, end_time)
    return temp
    return wraps
    print(start_time)
    print(end_time)
    print(input(info))

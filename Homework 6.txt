Задачи на функции

1.	Напишите функцию minimum(a, b, c) - > int, вычисляющую минимум трёх чисел. Функцию min() не использовать!
2.	Найдите минимальное 9 чисел с помощью функции написанной в предыдущей  задаче. Новую функцию не создавать! Использовать функцию из предыдущей задачи!
3.	Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющую расстояние между точкой (x1, y1) и (x2, y2). Считайте четыре действительных числа и выведите результат работы этой функции.
4.	Дано натуральное число n > 1. Проверьте, является ли оно простым. Простое число – такое, которое делится на себя и на 1. Единица не простое число! Программа должна вывести слово True, если число простое и False, если число составное.
5.	Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи. Ищем число Фиббоначи через цикл! Рекурсию не использовать! 
6.	Напишите реализацию функции closest_mod_5(x), принимающую в качестве единственного аргумента целое число x и возвращающую самое маленькое целое число y, такое что:     
-y больше или равно x                                                                                  
-y делится нацело на 5
Попробуйте решить без цикла!
7.	Напишите функцию modify_list(some_lst: list), которая принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два. Функция не должна ничего
возвращать, требуется только изменение переданного списка.
Дополнительные задачи
8.	В языке Python есть некоторые ограничения на имена переменных. Имена переменных 
-могут состоять только из цифр, букв и знаков подчеркивания.          
-не могут начинаться с цифры. 
Программист вводит строки с именами переменных. Для каждой переменной нужно вывести "Можно использовать", если ее имя корректно, или "Нельзя использовать", если это не так. Определив все нужные переменные, программист заканчивает ввод строкой "Поработали, и хватит".                                                                       
Для проверки каждой строки используйте функцию check_variable(v). Для простоты будем считать, что программист использует только латинские буквы.
Не может содержать : ! @ # $ % ^ & * ()
9.	Задано два списка. Написать функцию которая находит наименьший элемент среди элементов первого списка, которые не входит во второй список.
10.	Дан список положительных целых чисел . Напишите функцию которая вставит после каждого чётного числа его перевёртыш. 18 81, 42 24, 8 8, 122 221


1.
def minimum3(a,b,c):
    a = int(input())
    b = int(input())
    c = int(input())
    mas = [a,b,c]
    mas.sort()
    return mas[0]
    return min(min(min(a,b),c))
print(minimum3(a,b,c))
      

*****************************

import math
from math import sqrt

def is_Prime(a,b,c):
    i = 2
    while i <= sqrt(a,b,c):
        if a % i == 0:
            return False
        elif   b % i == 0:
            return False
        elif c % i == 0:
            return False
        i += 1
        if a > 1:
            return True
        if b > 1:
            return True
        if c > 1:
            return True
        a = int(input())
        b = int(input())
        c = int(input())
        if is_Prime(a,b,c):
            print('True')
        else:
            print('False')



2. 
def minimum9(a,b,c,d,e,f,g,h,i):
    a = int(input())
    b = int(input())
    c = int(input())
    d = int(input())
    e = int(input())
    f = int(input())
    g = int(input())
    h = int(input())
    i= int(input())
    mas = [a,b,c,d,e,f,g,h,i]
    mas.sort()
    return mas[0]
    return min(min(min(a,b,c,d,e,f,g,h,i)))
    print(minimum9(a,b,c,d,e,f,g,h,i))

3. 
import math
def shortestDistance(txt):
    x1, y1, x2, y2 = (int(num) for num in txt.split(','))
    return round(math.sqrt((x1 - x2) ** 2 +(y1 - y2) ** 2), 2)

4.
def is_Prime(n):
    if n < 2 or n != 2 and n % 2 == 0 or n != 3 and n % 3 == 0:
        return False
    i = 5
    s = 2
    while i * i <= n:
        if n % i == 0:
            return False
        i += s
        s = 4 if s == 2 else 2
        return True
    for i in range(101):
        print(i,'','', 'True' if is_Prime(i) else 'False', sep = '')

5.
fib1 = 1
fib2 = 1
n = input('Номер элемента Фибоначчи')
n = int(n)
i = 0
while i < n - 2:
    fib_sum = fib1 + fib2
    fib2 = fib_sum
    i = i + 1
    print('Значение этого элемента:', fib2)
6.
def closest_mod5(x):
    if x % 5 == 0:
        y = closest_mod5(int(x/5))
        return min(y)
    return x
n = int(input())
print(closest_mod5(n) * 5)

**************************
def closest_mod_5(x):
    if x % 5 == 0:
        return x
    else:
        y = closest_mod_5(int(x / 5))
        return x + 5 - x % 5
    return min(y)
    n = int(input())
    print(closest_mod_5(x) * 5)
    print(closest_mod_5(n) * 5)
7.
list = modify_list = [1, 2, 3, 4, 5, 6]
print(modify_list(lst))
print(lst)
modify_list(lst)
print(lst)
lst = [10, 5, 8, 3]
modify_list(lst)
print(lst)

*************************************
def modify_list(l1):
    for i in l1:
        if i % 2 == 0:
            return int(i / 2)
        else:
            del i
            l1 = [10, 5, 8, 3]
            modify_list(l1)
            print(l1)






 